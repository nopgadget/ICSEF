from src import (
    exploits,
    print_success,
    print_status,
    print_error,
    validators,
)
from src.modules.clients.zmq_client import ZMQClient, ZMQSocketType, ZMQTransport


class Exploit(exploits.Exploit):
    __info__ = {
        'name': '0MQ Device Control',
        'authors': [
            'ICSSploit Team'  # icssploit module
        ],
        'description': 'Control 0MQ devices by sending/receiving messages and managing subscriptions.',
        'references': [
            'https://pyzmq.readthedocs.io/en/latest/',
            'https://zeromq.org/',
        ],
        'devices': [
            '0MQ compliant devices',
        ],
    }

    target = exploits.Option('', 'Target 0MQ device IP address')
    port = exploits.Option(5555, '0MQ port, default is 5555/TCP', validators=validators.integer)
    socket_type = exploits.Option('REQ', 'Socket type: REQ, REP, PUB, SUB, PUSH, PULL, PAIR, DEALER, ROUTER', 
                                 validators=validators.choice(['REQ', 'REP', 'PUB', 'SUB', 'PUSH', 'PULL', 'PAIR', 'DEALER', 'ROUTER']))
    transport = exploits.Option('TCP', 'Transport protocol: TCP, IPC, INPROC', 
                               validators=validators.choice(['TCP', 'IPC', 'INPROC']))
    operation = exploits.Option('send', 'Operation to perform: send, receive, request_reply, subscribe, enumerate, permissions', 
                               validators=validators.choice(['send', 'receive', 'request_reply', 'subscribe', 'enumerate', 'permissions']))
    message = exploits.Option('', 'Message to send')
    topic = exploits.Option('', 'Topic for PUB/SUB operations')
    timeout = exploits.Option(5, 'Timeout in seconds for receive operations', validators=validators.integer)
    count = exploits.Option(1, 'Number of messages to receive', validators=validators.integer)

    def run(self):
        if not self.target:
            print_error("Target IP address is required")
            return
        
        print_status(f"Connecting to 0MQ device at {self.target}:{self.port}")
        
        try:
            # Parse socket type and transport
            socket_type = ZMQSocketType[self.socket_type]
            transport = ZMQTransport[self.transport]
            
            target = ZMQClient(name='ZMQController', address=self.target, port=self.port, 
                             socket_type=socket_type, transport=transport, timeout=self.timeout)
            
            if not target.connect():
                print_error(f"Failed to connect to 0MQ device at {self.target}:{self.port}")
                return
            
            print_success(f"Connected to 0MQ device at {self.target}:{self.port}")
            
            if self.operation == 'send':
                self._send_operation(target)
            elif self.operation == 'receive':
                self._receive_operation(target)
            elif self.operation == 'request_reply':
                self._request_reply_operation(target)
            elif self.operation == 'subscribe':
                self._subscribe_operation(target)
            elif self.operation == 'enumerate':
                self._enumerate_operation(target)
            elif self.operation == 'permissions':
                self._permissions_operation(target)
            else:
                print_error(f"Unknown operation: {self.operation}")
            
            target.disconnect()
            
        except Exception as e:
            print_error(f"Error during 0MQ operation: {e}")
    
    def _send_operation(self, target):
        """Send operation"""
        if not self.message:
            print_error("Message is required for send operation")
            return
        
        print_status(f"Sending message: {self.message}")
        
        try:
            if target.send_message(self.message, self.topic):
                print_success(f"Message sent successfully")
            else:
                print_error("Failed to send message")
        except Exception as e:
            print_error(f"Error sending message: {e}")
    
    def _receive_operation(self, target):
        """Receive operation"""
        print_status(f"Receiving {self.count} messages (timeout: {self.timeout}s)")
        
        try:
            for i in range(self.count):
                message = target.receive_message(timeout=self.timeout)
                if message:
                    print_success(f"Message {i+1}: {message}")
                else:
                    print_error(f"No message received for attempt {i+1}")
        except Exception as e:
            print_error(f"Error receiving messages: {e}")
    
    def _request_reply_operation(self, target):
        """Request-reply operation"""
        if not self.message:
            print_error("Message is required for request_reply operation")
            return
        
        print_status(f"Sending request: {self.message}")
        
        try:
            response = target.request_reply(self.message, timeout=self.timeout)
            if response:
                print_success(f"Response: {response}")
            else:
                print_error("No response received")
        except Exception as e:
            print_error(f"Error in request-reply: {e}")
    
    def _subscribe_operation(self, target):
        """Subscribe operation"""
        if not self.topic:
            print_error("Topic is required for subscribe operation")
            return
        
        print_status(f"Subscribing to topic: {self.topic}")
        
        try:
            if target.subscribe(self.topic):
                print_success(f"Successfully subscribed to topic: {self.topic}")
                
                # Try to receive messages for this topic
                print_status(f"Listening for messages on topic: {self.topic}")
                for i in range(self.count):
                    message = target.receive_message(timeout=self.timeout)
                    if message:
                        print_success(f"Topic message {i+1}: {message}")
                    else:
                        print_error(f"No message received for topic {self.topic}")
            else:
                print_error("Failed to subscribe to topic")
        except Exception as e:
            print_error(f"Error in subscribe operation: {e}")
    
    def _enumerate_operation(self, target):
        """Enumerate operation"""
        print_status(f"Enumerating 0MQ device capabilities")
        
        try:
            capabilities = target.enumerate_device()
            
            if capabilities:
                print_success(f"Found {len(capabilities)} capability types:")
                for cap_type, instances in capabilities.items():
                    print_status(f"  {cap_type}: {len(instances)} capabilities")
                    for item, value in instances:
                        print_status(f"    {cap_type}[{item}]: {value}")
            else:
                print_error("No capabilities found")
        except Exception as e:
            print_error(f"Error enumerating device: {e}")
    
    def _permissions_operation(self, target):
        """Permissions operation"""
        print_status(f"Checking 0MQ device permissions")
        
        try:
            permissions = target.check_permissions()
            
            print_success("Permission check results:")
            for perm_name, has_perm in permissions.items():
                status = "✓" if has_perm else "✗"
                print_status(f"  {status} {perm_name}")
        except Exception as e:
            print_error(f"Error checking permissions: {e}") 